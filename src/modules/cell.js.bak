/*global jsPDF */
/** 
 * @license
 * ====================================================================
 * Copyright (c) 2013 Youssef Beddad, youssef.beddad@gmail.com
 *               2013 Eduardo Menezes de Morais, eduardo.morais@usp.br
 *               2013 Lee Driscoll, https://github.com/lsdriscoll
 *               2014 Juan Pablo Gaviria, https://github.com/juanpgaviria
 *               2014 James Hall, james@parall.ax
 *               2014 Diego Casorran, https://github.com/diegocr
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * ====================================================================
 */

/**
* @name cell
* @module
*/
(function (jsPDFAPI) {
    'use strict';

    var NO_MARGINS = { left: 0, top: 0, bottom: 0, right: 0 };

    var _initialize = function () {
        if (typeof this.internal.__cell__ === "undefined") {
            this.internal.__cell__ = {};
            this.internal.__cell__.padding = 3;
            this.internal.__cell__.margin = 13;
            this.internal.__cell__.headerFunction = undefined;
            this.internal.__cell__.printingHeaderRow = false;
            _reset.call(this);
        }
    };

    var _reset = function () {
        this.internal.__cell__.lastCell = new Cell();
        this.internal.__cell__.pages = 1;
    };

    var Cell = function (x, y, width, height, lineNumber) {
        var _x = 0;
        Object.defineProperty(this, 'x', {
            enumerable: true,
            get: function () {
                return _x;
            },
            set: function (value) {
                _x = value;
            }
        });
        var _y = 0;
        Object.defineProperty(this, 'y', {
            enumerable: true,
            get: function () {
                return _y;
            },
            set: function (value) {
                _y = value;
            }
        });
        var _width = 0;
        Object.defineProperty(this, 'width', {
            enumerable: true,
            get: function () {
                return _width;
            },
            set: function (value) {
                _width = value;
            }
        });
        var _height = 0;
        Object.defineProperty(this, 'height', {
            enumerable: true,
            get: function () {
                return _height;
            },
            set: function (value) {
                _height = value;
            }
        });
        var _lineNumber = -1;
        Object.defineProperty(this, 'lineNumber', {
            enumerable: true,
            get: function () {
                return _lineNumber;
            },
            set: function (value) {
                _lineNumber = value;
            }
        });
        _x = x;
        _y = y;
        _width = width;
        _height = height;
        _lineNumber = lineNumber;

        return this;
    };

    Cell.prototype.clone = function () {
        return new Cell(this.x, this.y, this.width, this.height, this.lineNumber);
    };

    Cell.prototype.toArray = function () {
        return [this.x, this.y, this.width, this.height, this.lineNumber];
    };

    /**
    * @name setHeaderFunction
    * @function
    * @param {function} func
    */
    jsPDFAPI.setHeaderFunction = function (func) {
        _initialize.call(this);
        this.internal.__cell__.headerFunction = (typeof func === 'function') ? func : undefined;
        return this;
    };

    /**
    * @name getTextDimensions
    * @function
    * @param {string} txt
    * @returns {Object} dimensions
    */
    jsPDFAPI.getTextDimensions = function (text, options) {
        _initialize.call(this);
        var fontSize = this.internal.__cell__.table_font_size || this.getFontSize();
        options = options || {};
        var scaleFactor = options.scaleFactor || this.internal.scaleFactor;
        var width = 0;
        var amountOfLines = 0;
        var height = 0;
        var tempWidth = 0;

        if (!Array.isArray(text) && typeof text !== 'string') {
            throw new Error('getTextDimensions expects text-parameter to be of type String or an Array of Strings.');
        }

        text = Array.isArray(text) ? text : [text];
        for (var i = 0; i < text.length; i++) {
            tempWidth = this.getStringUnitWidth(text[i]) * fontSize;
            if (width < tempWidth) {
                width = tempWidth;
            }
            if (width !== 0) {
                amountOfLines = text.length;
            }
        }

        width = width / scaleFactor;
        height = Math.max((amountOfLines * fontSize * this.getLineHeightFactor() - (fontSize * (this.getLineHeightFactor() - 1))) / scaleFactor, 0);
        return { w: width, h: height, width: width, height: height };
    };

    /**
    * @name cellAddPage
    * @function
    */
    jsPDFAPI.cellAddPage = function () {
        _initialize.call(this);

        this.addPage();

        var margins = this.internal.__cell__.margins || NO_MARGINS;
        this.internal.__cell__.lastCell = new Cell(margins.left, margins.top, undefined, undefined);
        this.internal.__cell__.pages += 1;

        return this;
    };

    /**
    * @name cellInitialize
    * @function
    * @deprecated
    */
    jsPDFAPI.cellInitialize = function () {
        _initialize.call(this);
		_reset.call(this);
    };

    /**
    * @name cell
    * @function
    * @param {number} x
    * @param {number} y
    * @param {number} width
    * @param {number} height
    * @param {string} text
    * @param {number} lineNumber lineNumber
    * @param {string} align
    * @return {jsPDF} jsPDF-instance
    */
    var cell = jsPDFAPI.cell = function (x, y, width, height, text, lineNumber, align) {
        _initialize.call(this);
        var lastCell = this.internal.__cell__.lastCell;
        var currentCell = lastCell.clone();
        var padding = this.internal.__cell__.padding;
        var margins = this.internal.__cell__.margins || NO_MARGINS;
        var margin = this.internal.__cell__.margin;
        var tableHeaderRow = this.internal.__cell__.tableHeaderRow;
        var printHeaders = this.internal.__cell__.printHeaders;
        var printingHeaderRow = this.internal.__cell__.printingHeaderRow;

        currentCell.lineNumber = lineNumber;


        // If this is not the first cell, we must change its position
        if (currentCell.lineNumber !== undefined) {
            if (lastCell.lineNumber === currentCell.lineNumber) {
                //Same line
                currentCell.x = (lastCell.x || 0) + (lastCell.width || 0);
                currentCell.y = lastCell.y || 0;
            } else {
                //New line
                if ((currentCell.y + currentCell.height + height + margin) >= this.getPageHeight() - margins.bottom) {
                    this.cellAddPage();
                    if (printHeaders && tableHeaderRow) {
                        this.printHeaderRow(lineNumber, true);
                    }
                }
                //We ignore the passed y: the lines may have different heights
				currentCell.x = lastCell.x;
                currentCell.y = (lastCell.y + lastCell.h) || 0;
            }
        } else {
            currentCell.x = x || 0;
            currentCell.y = y || 0;
        }

        console.log(arguments);
        console.log('currentCell');
        console.log(currentCell);
        console.log('lastCell');
        console.log(lastCell)
        if (typeof text[0] === 'string') {
            this.rect(currentCell.x, currentCell.y, currentCell.width, currentCell.height);
            if (printingHeaderRow === true) {
                this.out('FD')
            }
            if (align === 'right') {
                text = (Array.isArray(text)) ? text : [text];
				this.text(text, currentCell.x + currentCell.width - padding, currentCell.y, {align: 'right'});
            } else {
                this.text(text, currentCell.x + padding, currentCell.y + this.getLineHeight());
            }
        }
        this.internal.__cell__.lastCell = currentCell;
        return this;
    };

    /**
     * Create a table from a set of data.
     * @name table
     * @function
     * @param {Integer} [x] : left-position for top-left corner of table
     * @param {Integer} [y] top-position for top-left corner of table
     * @param {Object[]} [data] An array of objects containing key-value pairs corresponding to a row of data.
     * @param {String[]} [headers] Omit or null to auto-generate headers at a performance cost

     * @param {Object} [config.printHeaders] True to print column headers at the top of every page
     * @param {Object} [config.autoSize] True to dynamically set the column widths to match the widest cell value
     * @param {Object} [config.margins] margin values for left, top, bottom, and width
     * @param {Object} [config.fontSize] Integer fontSize to use (optional)
     * @returns {jsPDF} jsPDF-instance
     */

    jsPDFAPI.table = function (x, y, data, headers, config) {
        _initialize.call(this);
        if (!data) {
            throw new Error('No data for PDF table.');
        }

        config = config || {};

        var headerNames = [],
            headerPrompts = [],
            header,
            i,
            lineNumber,
            cln,
            columnMatrix = {},
            columnWidths = {},
            columnData,
            column,
            columnMinWidths = [],
            j,
            tableHeaderConfigs = [],
            model,
            func,

            //set up defaults. If a value is provided in config, defaults will be overwritten:
            autoSize = config.autoSize || false,
            printHeaders = (config.printHeaders === false) ? false : true,
            fontSize = (config.css && typeof (config.css['font-size']) !== "undefined") ? config.css['font-size'] * 16 : config.fontSize || 12,
            margins = config.margins || NO_MARGINS;

        margins.width = this.getPageWidth();

        _reset.call(this);

        this.internal.__cell__.printHeaders = printHeaders;
        this.internal.__cell__.margins = margins;
        this.internal.__cell__.table_font_size = fontSize;
        var scaleFactor = this.internal.scaleFactor;
        this.setFontSize(fontSize);

        // Set header values
        if (headers === undefined || (headers === null)) {
            // No headers defined so we derive from data
            headerNames = Object.keys(data[0]);

        } else if (headers[0] && (typeof headers[0] !== 'string')) {

            // Split header configs into names and prompts
            for (i = 0, lineNumber = headers.length; i < lineNumber; i += 1) {
                header = headers[i];
                headerNames.push(header.name);
                headerPrompts.push(header.prompt);
                columnWidths[header.name] = header.width / scaleFactor;
            }

        } else {
            headerNames = headers;
        }

        if (autoSize) {
            // Create a matrix of columns e.g., {column_title: [row1_Record, row2_Record]}
            func = function (rec) {
                return rec[header];
            };

            for (i = 0, lineNumber = headerNames.length; i < lineNumber; i += 1) {
                header = headerNames[i];

                columnMatrix[header] = data.map(
                    func
                );

                // get header width
                columnMinWidths.push(this.getTextDimensions(headerPrompts[i] || header, { scaleFactor: 1 }).width);
                column = columnMatrix[header];

                // get cell widths
                for (j = 0, cln = column.length; j < cln; j += 1) {
                    columnMinWidths.push(this.getTextDimensions( column[j], { scaleFactor: 1 }).width);
                }

                // get final column width
                columnWidths[header] = Math.max.apply(null, columnMinWidths);

                //have to reset
                columnMinWidths = [];
            }
        }

        // -- Construct the table

        if (printHeaders) {
            var lineHeight = calculateLineHeight.call(this, headerNames, columnWidths, headerPrompts.length ? headerPrompts : headerNames);

            // Construct the header row
            for (i = 0, lineNumber = headerNames.length; i < lineNumber; i += 1) {
                header = headerNames[i];
                tableHeaderConfigs.push(new Cell(x, y, columnWidths[header], lineHeight, String(headerPrompts.length ? headerPrompts[i] : header)));
            }

            // Store the table header config
            this.setTableHeaderRow(tableHeaderConfigs);

            // Print the header for the start of the table
            this.printHeaderRow(1, false);
        }

        // Construct the data rows

        var align = headers.reduce(function (pv, cv) { pv[cv.name] = cv.align; return pv }, {});
        for (i = 0; i < data.length; i += 1) {
            model = data[i];
            lineHeight = calculateLineHeight.call(this, headerNames, columnWidths, model);

            for (j = 0; j < headerNames.length; j += 1) {
                header = headerNames[j];
                cell.call(this, x, y, columnWidths[header], lineHeight, model[header], i + 2, align[header]);
            }
        }
        this.internal.__cell__.table_x = x;
        this.internal.__cell__.table_y = y;
        return this;
    };
    /**
     * Calculate the height for containing the highest column
     *
     * @name calculateLineHeight
     * @function
     * @param {String[]} headerNames is the header, used as keys to the data
     * @param {Integer[]} columnWidths is size of each column
     * @param {Object[]} model is the line of data we want to calculate the height of
     * @returns {number} lineHeight
	 * @private
     */
    var calculateLineHeight = function (headerNames, columnWidths, model) {
        var header, headerString, tmpResult, result = 0;

        var padding = this.internal.__cell__.padding;
        for (var j = 0; j < headerNames.length; j++) {
            header = headerNames[j];
            headerString = (Array.isArray(model[header])) ? model[header].join('') : header;
            model[header] = this.splitTextToSize(headerString, columnWidths[header] - padding);
            tmpResult = this.getLineHeightFactor() * model[header].length + padding;
            result = (tmpResult > result) ? tmpResult : result;
        }
        return result;
    };

    /**
     * Store the config for outputting a table header
     *
     * @name setTableHeaderRow
     * @function
     * @param {Object[]} config
     * An array of cell configs that would define a header row: Each config matches the config used by jsPDFAPI.cell
     * except the lineNumber parameter is excluded
     */
    jsPDFAPI.setTableHeaderRow = function (config) {
        _initialize.call(this);
        this.internal.__cell__.tableHeaderRow = config;
    };

    /**
     * Output the store header row
     * 
     * @name printHeaderRow
     * @function
     * @param {number} lineNumber The line number to output the header at
     * @param {boolean} new_page 
     */
    jsPDFAPI.printHeaderRow = function (lineNumber, new_page) {
        _initialize.call(this);
        if (!this.internal.__cell__.tableHeaderRow) {
            throw new Error('Property tableHeaderRow does not exist.');
        }

        var tableHeaderCell;

        this.internal.__cell__.printingHeaderRow = true;
        if (typeof this.internal.__cell__.headerFunction === 'function') {
            var position = this.internal.__cell__.headerFunction(this, this.internal.__cell__.pages);
            this.internal.__cell__.lastCell = new Cell(position[0], position[1], position[2], position[3], -1);
        }
        this.setFontStyle('bold');
        this.setFillColor('#C8C8C8');

        var tempHeaderConf = [];
        for (var i = 0; i < this.internal.__cell__.tableHeaderRow.length; i += 1) {
            tableHeaderCell = this.internal.__cell__.tableHeaderRow[i].clone();
            if (new_page) {
                this.internal.__cell__.margins.top = this.internal.__cell__.margin;
                tableHeaderCell.y = this.internal.__cell__.margins.top || 0;
                tempHeaderConf.push(tableHeaderCell);
            }
			tableHeaderCell.lineNumber = lineNumber;
            cell.apply(this, tableHeaderCell.toArray());
        }
        if (tempHeaderConf.length > 0) {
            this.setTableHeaderRow(tempHeaderConf);
        }
        this.setFontStyle('normal');
        this.internal.__cell__.printingHeaderRow = false;
    };

})(jsPDF.API);
